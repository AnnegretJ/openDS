//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.11.22 at 03:20:44 PM CET 
//


package eu.opends.opendrive.roadGenerator;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for codriverType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="codriverType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;all>
 *         &lt;element name="startPosition" type="{http://opends.eu/roadDescription}onroadPositionType"/>
 *         &lt;element name="preferredConnections" type="{http://opends.eu/roadDescription}preferredConnectionsType" minOccurs="0"/>
 *         &lt;element name="targetPosition" type="{http://opends.eu/roadDescription}onroadPositionType" minOccurs="0"/>
 *         &lt;element name="terminateSimulation" type="{http://opends.eu/roadDescription}terminateSimulationType" minOccurs="0"/>
 *       &lt;/all>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "codriverType", propOrder = {

})
public class CodriverType {

    @XmlElement(required = true)
    protected OnroadPositionType startPosition;
    protected PreferredConnectionsType preferredConnections;
    protected OnroadPositionType targetPosition;
    protected TerminateSimulationType terminateSimulation;

    /**
     * Gets the value of the startPosition property.
     * 
     * @return
     *     possible object is
     *     {@link OnroadPositionType }
     *     
     */
    public OnroadPositionType getStartPosition() {
        return startPosition;
    }

    /**
     * Sets the value of the startPosition property.
     * 
     * @param value
     *     allowed object is
     *     {@link OnroadPositionType }
     *     
     */
    public void setStartPosition(OnroadPositionType value) {
        this.startPosition = value;
    }

    /**
     * Gets the value of the preferredConnections property.
     * 
     * @return
     *     possible object is
     *     {@link PreferredConnectionsType }
     *     
     */
    public PreferredConnectionsType getPreferredConnections() {
        return preferredConnections;
    }

    /**
     * Sets the value of the preferredConnections property.
     * 
     * @param value
     *     allowed object is
     *     {@link PreferredConnectionsType }
     *     
     */
    public void setPreferredConnections(PreferredConnectionsType value) {
        this.preferredConnections = value;
    }

    /**
     * Gets the value of the targetPosition property.
     * 
     * @return
     *     possible object is
     *     {@link OnroadPositionType }
     *     
     */
    public OnroadPositionType getTargetPosition() {
        return targetPosition;
    }

    /**
     * Sets the value of the targetPosition property.
     * 
     * @param value
     *     allowed object is
     *     {@link OnroadPositionType }
     *     
     */
    public void setTargetPosition(OnroadPositionType value) {
        this.targetPosition = value;
    }

    /**
     * Gets the value of the terminateSimulation property.
     * 
     * @return
     *     possible object is
     *     {@link TerminateSimulationType }
     *     
     */
    public TerminateSimulationType getTerminateSimulation() {
        return terminateSimulation;
    }

    /**
     * Sets the value of the terminateSimulation property.
     * 
     * @param value
     *     allowed object is
     *     {@link TerminateSimulationType }
     *     
     */
    public void setTerminateSimulation(TerminateSimulationType value) {
        this.terminateSimulation = value;
    }

}
